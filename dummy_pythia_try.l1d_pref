#include "cache.h"
#include <unordered_map>
#include <vector>
#include <deque>
#include <cstdlib>
#include <iostream>
#include <cstdint>

#define LOG2_BLOCK_SIZE 6
#define LOG2_PAGE_SIZE 12
#define NUM_ACTIONS 6
#define EQ_MAX_SIZE 128

// State representation including PC and last 4 deltas
struct State {
    uint64_t pc;
    std::deque<int64_t> deltas;

    bool operator==(const State& other) const {
        return (pc == other.pc) && (deltas == other.deltas);
    }
};

// Hash function for State
namespace std {
    template <>
    struct hash<State> {
        std::size_t operator()(const State& s) const noexcept {
            size_t hash_value = std::hash<uint64_t>()(s.pc);
            for (int64_t delta : s.deltas) {
                hash_value ^= std::hash<int64_t>()(delta);
            }
            return hash_value;
        }
    };
};

// EQ_ENTRY for the Evaluation Queue
struct EQ_ENTRY {
    State state;
    int action;
    int reward;
    EQ_ENTRY(const State& s, int a, int r) : state(s), action(a), reward(r) {}
};

// Q-value table and Evaluation Queue (EQ)
std::unordered_map<State, std::vector<double>> QTable;
std::vector<EQ_ENTRY> EQ;

// Learning parameters
double alpha = 0.01;
double gamma_fac = 0.9;
double epsilon = 0.02;

// Functions for action selection, reward assignment, and SARSA update
State get_state(uint64_t pc, uint64_t cl_addr, std::deque<int64_t>& last_deltas);
int best_action(const State& state);
int random_action();
uint64_t calculate_prefetch_address(uint64_t cl_addr, int action);
void apply_sarsa_update(const EQ_ENTRY& evicted_entry);
bool is_within_page(uint64_t prefetch_addr, uint64_t addr);

void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;

    // Get or initialize the last 4 deltas for this IP
    static std::unordered_map<uint64_t, std::deque<int64_t>> ip_deltas;
    auto& last_deltas = ip_deltas[ip];
    State state = get_state(ip, cl_addr, last_deltas);

    // Ensure QTable entry for the current state exists
    if (QTable.find(state) == QTable.end()) {
        QTable[state] = std::vector<double>(NUM_ACTIONS, 0.0);
    }

    // Epsilon-greedy action selection
    int action = (rand() < epsilon * RAND_MAX) ? random_action() : best_action(state);

    // Calculate prefetch address and issue prefetch if within the same page
    uint64_t prefetch_addr = calculate_prefetch_address(cl_addr, action);
    if (is_within_page(prefetch_addr, addr)) {
        prefetch_line(ip, addr, prefetch_addr, FILL_L1, 0);
        EQ.emplace(EQ.begin(), state, action, 0);  // Insert EQ entry at the beginning
    }

    // Evict and apply SARSA update if EQ is full
    if (EQ.size() > EQ_MAX_SIZE) {
        EQ_ENTRY evicted_entry = EQ.back();
        EQ.pop_back();  // Remove the oldest entry
        apply_sarsa_update(evicted_entry);
    }

    // Update deltas with the new delta for this access
    int64_t delta = cl_addr - (last_deltas.empty() ? cl_addr : last_deltas.back());
    if (last_deltas.size() == 4) last_deltas.pop_front();
    last_deltas.push_back(delta);
}

// Helper function to calculate the state, including the last 4 deltas
State get_state(uint64_t pc, uint64_t cl_addr, std::deque<int64_t>& last_deltas) {
    State state;
    state.pc = pc;
    state.deltas = last_deltas; // Copy last 4 deltas
    return state;
}

// Choose best action based on Q-table values
int best_action(const State& state) {
    int best_action = 0;
    double max_q = QTable[state][0];
    for (int a = 1; a < NUM_ACTIONS; ++a) {
        if (QTable[state][a] > max_q) {
            max_q = QTable[state][a];
            best_action = a;
        }
    }
    return best_action;
}

// Select a random action for exploration
int random_action() {
    return rand() % NUM_ACTIONS;
}

// Calculate prefetch address based on action offset
uint64_t calculate_prefetch_address(uint64_t cl_addr, int action) {
    static const int offsets[NUM_ACTIONS] = {-6, -3, -1, 1, 3, 6};
    return (cl_addr + offsets[action]) << LOG2_BLOCK_SIZE;
}

// Apply SARSA update to Q-values
void apply_sarsa_update(const EQ_ENTRY& evicted_entry) {
    State S1 = evicted_entry.state;
    int A1 = evicted_entry.action;
    int R = evicted_entry.reward;

    // Get the next state-action pair from the head of EQ
    const State& S2 = EQ.front().state;
    int A2 = EQ.front().action;

    // Ensure Q-values are initialized
    if (QTable.find(S1) == QTable.end()) QTable[S1] = std::vector<double>(NUM_ACTIONS, 0.0);
    if (QTable.find(S2) == QTable.end()) QTable[S2] = std::vector<double>(NUM_ACTIONS, 0.0);

    // SARSA update rule
    QTable[S1][A1] = QTable[S1][A1] + alpha * (R + gamma_fac * QTable[S2][A2] - QTable[S1][A1]);
}

// Check if the prefetch address is within the same page
bool is_within_page(uint64_t prefetch_addr, uint64_t addr) {
    return (prefetch_addr >> LOG2_PAGE_SIZE) == (addr >> LOG2_PAGE_SIZE);
}

// Prefetcher initialize function
void CACHE::l1d_prefetcher_initialize() 
{
    std::cout << "CPU " << cpu << " L1D Pythia prefetcher initialized." << std::endl;
}

// ------------------------- DO NOT CHANGE -------------------------------- //
void CACHE::l1d_prefetcher_notify_about_dtlb_eviction(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in) {}

void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in) {}

void CACHE::l1d_prefetcher_final_stats()
{
    std::cout << "CPU " << cpu << " L1D Pythia prefetcher final stats" << std::endl;
}
// ------------------------- DO NOT CHANGE --------------------------------
